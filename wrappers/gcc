#!/usr/bin/python3

"""
Use this wrapper to avoid compilation and thus speedup (static) analysis of
source code.  Use it as follows:

export PATH=$PWD:$PATH

Preprocess Only
make C=0

Syntax Only
make C=1
"""

# (c) 2016 Christian Dietrich <dietrich@cs.fau.de>
#
# Licensed under the terms of the GNU GPL License version 3


import sys
import os
import shutil
from subprocess import *


def call_gcc(args):
    x = Popen(["/usr/bin/gcc"] + args, stdin=sys.stdin, stdout=sys.stdout, stderr=sys.stderr)
    retcode = x.wait()
    return retcode


def dummy_objectfile(object_file, args):
    if "-m16" in args:
        fn = "dummy-16.o"
        extra_args = "-m16"
    elif "-m32" in args:
        fn = "dummy-32.o"
        extra_args = "-m32"
    else:
        fn = "dummy-64.o"
        extra_args = ""

    if not os.path.exists(fn):
        x = Popen("/usr/bin/gcc -xc - -c " + extra_args + " -o " + fn + " < /dev/null", shell=True)
        x.wait()

    shutil.copyfile(fn, object_file)


def preprocess_only(args, object_file):
    dummy_objectfile(object_file, args)

    args = [x for x in args if x != "-c"] + ["-E"]
    args[args.index("-o") + 1] = "/dev/null"
    return call_gcc(args)


def syntax_only(args, object_file):
    dummy_objectfile(object_file, args)

    args = args + ["-fsyntax-only"]
    return call_gcc(args)


if __name__ == '__main__':
    compile_level = int(os.environ.get("C", "2"))
    args = sys.argv[1:]

    bad_pattern = lambda x: x.startswith("scripts")  \
                  or "tools/relocs" in x             \
                  or "tools/objtool" in x            \
                  or x.startswith("samples")         \
                  or x.startswith("Documentation")

    if "-o" in sys.argv and "-c" in sys.argv                    \
            and not any(bad_pattern(arg) for arg in sys.argv)   \
            and args[args.index("-o") + 1] != "-":

        # get object files from args and do (depending on the specified compile
        # level) a full compilation, a preprocessor or a syntax analysis
        object_file = sys.argv[sys.argv.index("-o") + 1]
        if compile_level == 0:
            retcode = preprocess_only(args, object_file)
        elif compile_level == 1:
            retcode = syntax_only(args, object_file)
        else:
            retcode = call_gcc(sys.argv[1:])
    else:
        retcode = call_gcc(sys.argv[1:])

    sys.exit(retcode)
